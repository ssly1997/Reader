<?xml version='1.0' encoding='utf-8'?>
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <title>未知</title>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <link href="../../stylesheet.css" rel="stylesheet" type="text/css"/>
<link href="../../page_styles.css" rel="stylesheet" type="text/css"/>
</head>
  <body class="calibre">
  <h2 class="calibre9">1.2 模型-视图-控制器</h2>

  <p class="calibre1">　　模型-视图-控制器（Model-View-Controller），简称MVC，是iOS开发中频繁使用的一种设计模式。其含义是，应用创建的任何一个对象，其类型必定是模型对象、视图对象或控制器对象三种类型中的一种。</p>

  <p class="calibre1">　　•视图对象是用户可以看见的对象，例如按钮、文本框、滑动条。视图对象用来构建用户界面，在Quiz应用中，显示问题和答案的标签以及标签下方的按钮都是视图对象。</p>

  <p class="calibre1">　　•模型对象负责存储数据，与用户界面无关。Quiz应用中的模型对象是两个包含字符串对象的数组：questions数组和answers数组。</p>

  <p class="calibre1">　　•通常情况下，模型对象表示真实世界中与用户相关的事物。例如，读者要为一家保险公司开发应用，那么很可能会设计一个InsurancePolicy（保险协议）类的模型对象。</p>

  <p class="calibre1">　　•控制器对象扮演“管家”的角色，它用于控制视图对象为用户呈现的内容，以及负责确保视图对象和模型对象的数据保持一致。</p>

  <p class="calibre1">　　一般来说，控制器用来回答：然后会发生什么？例如，用户从列表中选择了一项之后，控制器负责呈现接下来应该看到的内容。</p>

  <p class="calibre1">　　图1-6显示的是应用响应用户操作的流程，例如用户点击了应用界面上的一个按钮。</p>

  <p class="calibre7"><img alt="tu1-6" src="../Images/image00361.jpeg" class="calibre8"/></p>

  <p class="calibre7">图1-6 MVC设计模式</p>

  <p class="calibre1">　　请读者注意，模型对象和视图对象之间没有直接产生联系，而是由控制器对象负责彼此间的消息发送和数据传递。</p>
<div class="calibre5">本书由「<a href="https://epubw.com" class="calibre6">ePUBw.COM</a>」整理，<a href="https://epubw.com" class="calibre6">ePUBw.COM</a> 提供最新最全的优质电子书下载！！！</div></body></html>
