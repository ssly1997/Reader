<?xml version='1.0' encoding='utf-8'?>
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <title>未知</title>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <link href="../../stylesheet.css" rel="stylesheet" type="text/css"/>
<link href="../../page_styles.css" rel="stylesheet" type="text/css"/>
</head>
  <body class="calibre">
  <p class="calibre1"><br class="calibre2"/></p>

  <h1 class="calibre3"><span class="calibre4">第5章视图：重绘与UIScrollView</span></h1>

  <p class="calibre1">　　本章学习视图的重绘机制并继续开发Hypnosister应用，当用户触摸BNRHypnosisView时，圆形的颜色会改变。为了改变圆形的颜色，BNRHypnosisView需要重新绘制自己。在后面的章节中，还会将一个UIScrollView对象添加到Hypnosister的视图层次结构中。</p>

  <p class="calibre1">　　首先要在BNRHypnosisView中声明一个属性，用来表示圆形的颜色。之前的项目一直是在头文件中声明属性的，其实属性也可以在类扩展（class extensions）中声明。</p>

  <p class="calibre1">　　打开BNRHypnosisView.m文件，在文件顶部添加以下代码：</p>

  <p class="calibre1">　　#import "BNRHypnosisView.h"</p>

  <p class="calibre1"><span class="calibre10">　　@interface BNRHypnosisView ()</span><br class="calibre2"/></p>

  <p class="calibre1"><span class="calibre10">　　@property (strong, nonatomic) UIColor *circleColor;</span><br class="calibre2"/></p>

  <p class="calibre1"><span class="calibre10">　　@end</span><br class="calibre2"/></p>

  <p class="calibre1">　　@implementation BNRHypnosisView</p>

  <p class="calibre1">　　加入的三行代码称为BNRHypnosisView的类扩展。类扩展中声明了一个circleColor属性——为什么要将该属性声明在类扩展中而不是头文件中？原因会在完成改变圆形颜色的功能之后介绍，现在只要将circleColor看成是BNRHypnosisView的一个普通属性即可。</p>

  <p class="calibre1">　　在BNRHypnosisView.m的initWithFrame:方法中，为circleColor属性设置默认颜色，代码如下：</p>

  <p class="calibre1">　　- (instancetype)initWithFrame:(CGRect)frame</p>

  <p class="calibre1">　　{</p>

  <p class="calibre1">　　self = [super initWithFrame:frame];</p>

  <p class="calibre1">　　if (self) {</p>

  <p class="calibre1">　　　　self.backgroundColor = [UIColor clearColor];</p>

  <p class="calibre1"><span class="calibre10">　　　　self.circleColor = [UIColor lightGrayColor];</span><br class="calibre2"/></p>

  <p class="calibre1">　　}</p>

  <p class="calibre1">　　return self;</p>

  <p class="calibre1">　　}</p>

  <p class="calibre1">　　在drawRect:方法中修改设置线条颜色的代码，使用circleColor作为线条颜色：</p>

  <p class="calibre1">　　// 设置线条宽度为10点</p>

  <p class="calibre1">　　path.lineWidth = 10;</p>

  <p class="calibre1">　　<del class="calibre11"><span class="calibre10">[[UIColor lightGrayColor] setStroke];</span></del></p>

  <p class="calibre1"><span class="calibre10">　　[self.circleColor setStroke];</span><br class="calibre2"/></p>

  <p class="calibre1">　　// 绘制路径！</p>

  <p class="calibre1">　　[path stroke];</p>

  <p class="calibre1">　　构建并运行应用，BNRHypnosisView对象绘制的圆形颜色应该与之前的相同。下一步是编写视图被触摸时改变圆形颜色的代码。</p>

  <p class="calibre1">　　当用户触摸视图时，视图会收到touchesBegan:withEvent:消息，该消息用来处理触摸事件。第12章会详细介绍触摸事件与事件处理机制，现在只需要直接覆盖touchesBegan: withEvent:方法即可，这样就可以在BNRHypnosisView被触摸后改变circleColor属性所表示的颜色。</p>

  <p class="calibre1">　　在BNRHypnosisView.m中覆盖touchesBegan:withEvent:，首先向控制台打印一条信息，然后创建一个随机生成的UIColor对象，并赋给circleColor属性。</p>

  <p class="calibre1"><span class="calibre10">　　// BNRHypnosisView被触摸时会收到该消息</span><br class="calibre2"/></p>

  <p class="calibre1"><span class="calibre10">　　- (void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event</span><br class="calibre2"/></p>

  <p class="calibre1"><span class="calibre10">　　{</span><br class="calibre2"/></p>

  <p class="calibre1"><span class="calibre10">　　NSLog(@"%@ was touched", self);</span><br class="calibre2"/></p>

  <p class="calibre1"><span class="calibre10">　　// 获取三个0到1之间的数字</span><br class="calibre2"/></p>

  <p class="calibre1"><span class="calibre10">　　float red = (arc4random() % 100) / 100.0;</span><br class="calibre2"/></p>

  <p class="calibre1"><span class="calibre10">　　float green = (arc4random() % 100) / 100.0;</span><br class="calibre2"/></p>

  <p class="calibre1"><span class="calibre10">　　float blue = (arc4random() % 100) / 100.0;</span><br class="calibre2"/></p>

  <p class="calibre1"><span class="calibre10">　　UIColor *randomColor = [UIColor colorWithRed:red</span><br class="calibre2"/></p>

  <p class="calibre1"><span class="calibre10">　　　　　　　　　　　　　　　　　　　　　green:green</span><br class="calibre2"/></p>

  <p class="calibre1"><span class="calibre10">　　　　　　　　　　　　　　　　　　　　　blue:blue</span><br class="calibre2"/></p>

  <p class="calibre1"><span class="calibre10">　　　　　　　　　　　　　　　　　　　　　alpha:1.0];</span><br class="calibre2"/></p>

  <p class="calibre1"><span class="calibre10">　　self.circleColor = randomColor;</span><br class="calibre2"/></p>

  <p class="calibre1"><span class="calibre10">　　}</span><br class="calibre2"/></p>

  <p class="calibre1">　　构建并运行应用，触摸BNRHypnosisView上的任意位置，控制台会打印视图被触摸的消息，但是圆形的颜色没有改变——BNRHypnosisView没有重新绘制自己。接下来会介绍视图没有重绘的原因以及如何解决这个问题。</p>

  <p class="calibre1"><br class="calibre2"/></p>
<div class="calibre5">本书由「<a href="https://epubw.com" class="calibre6">ePUBw.COM</a>」整理，<a href="https://epubw.com" class="calibre6">ePUBw.COM</a> 提供最新最全的优质电子书下载！！！</div></body></html>
