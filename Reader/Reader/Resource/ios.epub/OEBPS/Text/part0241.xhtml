<?xml version='1.0' encoding='utf-8'?>
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <title>未知</title>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <link href="../../stylesheet.css" rel="stylesheet" type="text/css"/>
<link href="../../page_styles.css" rel="stylesheet" type="text/css"/>
</head>
  <body class="calibre">
  <h2 class="calibre9">28.7 深入学习：状态恢复</h2>

  <p class="calibre1">　　本书第24章介绍了在不使用Storyboards的情况下恢复应用状态，本章介绍如何通过storyboard文件实现状态恢复。</p>

  <p class="calibre1">　　如果在Storyboards中使用状态恢复系统，可以避免编写大量样板代码（boilerplate code）。例如，视图控制器的恢复标识可以直接在Storyboard文件中设置。通常可以将视图控制器的Storyboard标识作为恢复标识，如图28-22所示。</p>

  <p class="calibre7"><img alt="tu28-22" src="../Images/image00711.jpeg" class="calibre8"/></p>

  <p class="calibre7">图28-22 Storyboard标识与恢复标识</p>

  <p class="calibre1">　　首先，如果要启用状态恢复，同样要在应用委托中实现保存和恢复应用状态的两个委托方法：</p>

  <p class="calibre1">　　@implementation BNRAppDelegate</p>

  <p class="calibre1">　　- （BOOL）application:（UIApplication *）application</p>

  <p class="calibre1">　　shouldSaveApplicationState:（NSCoder *）coder</p>

  <p class="calibre1">　　{</p>

  <p class="calibre1">　　return YES;</p>

  <p class="calibre1">　　}</p>

  <p class="calibre1">　　- （BOOL）application:（UIApplication *）application</p>

  <p class="calibre1">　　shouldRestoreApplicationState:（NSCoder *）coder</p>

  <p class="calibre1">　　{</p>

  <p class="calibre1">　　return YES;</p>

  <p class="calibre1">　　}</p>

  <p class="calibre1">　　接下来同样需要使UIViewController子类遵守UIViewControllerRestoration协议，并实现协议中的方法，返回相应的UIViewController子类对象。区别是，在Storyboards中，需要通过Storyboard文件实例化UIViewController子类，代码如下：</p>

  <p class="calibre1">　　+ （UIViewController *）</p>

  <p class="calibre1">　　viewControllerWithRestorationIdentifierPath:（NSArray *）path</p>

  <p class="calibre1">　　coder:（NSCoder *）coder</p>

  <p class="calibre1">　　{</p>

  <p class="calibre1">　　BNRColorViewController *vc = nil;</p>

  <p class="calibre1">　　UIStoryboard *storyboard = [coder decodeObjectForKey:</p>

  <p class="calibre1">　　UIStateRestorationViewControllerStoryboardKey];</p>

  <p class="calibre1">　　if （storyboard）</p>

  <p class="calibre1">　　{</p>

  <p class="calibre1">　　vc = （BNRColorViewController *）[storyboard</p>

  <p class="calibre1">　　instantiateViewControllerWithIdentifier:</p>

  <p class="calibre1">　　@“BNRColorViewController”];</p>

  <p class="calibre1">　　vc.restorationIdentifier = [identifierComponents lastObject];</p>

  <p class="calibre1">　　vc.restorationClass = [BNRColorViewController class];</p>

  <p class="calibre1">　　}</p>

  <p class="calibre1">　　return vc;</p>

  <p class="calibre1">　　}</p>

  <p class="calibre1">　　NSCoder对象编码了包含视图控制器的Storyboard文件，可以通过UIStateRestorationViewControllerStoryboardKey对Storyboard文件解码，得到UIStoryboard对象。UIStoryboard提供了instantiateViewControllerWithIdentifier:方法，可以根据Storyboard标识创建相应的视图控制器。</p>

  <p class="calibre1">　　除此之外，实现状态恢复的其余代码都是相同的。如果视图控制器要保存和恢复状态信息，同样要实现encodeRestorableStateWithCoder:和decodeRestorableStateWithCoder:方法。</p>
<div class="calibre5">本书由「<a href="https://epubw.com" class="calibre6">ePUBw.COM</a>」整理，<a href="https://epubw.com" class="calibre6">ePUBw.COM</a> 提供最新最全的优质电子书下载！！！</div></body></html>
