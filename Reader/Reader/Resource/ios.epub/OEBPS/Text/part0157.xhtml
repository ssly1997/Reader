<?xml version='1.0' encoding='utf-8'?>
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <title>未知</title>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <link href="../../stylesheet.css" rel="stylesheet" type="text/css"/>
<link href="../../page_styles.css" rel="stylesheet" type="text/css"/>
</head>
  <body class="calibre">
  <h2 class="calibre9">17.5 线程安全的单例</h2>

  <p class="calibre1">　　到目前为止，本书开发的都是单线程应用（single-threaded app）。单线程应用无法充分利用多核设备（从iPhone 4S起，世界上大部分iOS设备都属于多核设备）的CPU资源：在同一时间，单线程应用只能使用CPU的一个核，也只能执行一个函数。相反，多线程应用（multi-threaded app）可以同时在不同的CPU核上执行多个函数。</p>

  <p class="calibre1">　　本书第11章是通过以下代码创建单例的：</p>

  <p class="calibre1">　　+ （instancetype）sharedStore</p>

  <p class="calibre1">　　{</p>

  <p class="calibre1">　　static BNRImageStore *sharedStore = nil;</p>

  <p class="calibre1">　　if （！sharedStore） {</p>

  <p class="calibre1">　　sharedStore = [[self alloc] initPrivate];</p>

  <p class="calibre1">　　}</p>

  <p class="calibre1">　　return sharedStore;</p>

  <p class="calibre1">　　}</p>

  <p class="calibre1">　　// 不允许直接调用init方法</p>

  <p class="calibre1">　　- （instancetype）init</p>

  <p class="calibre1">　　{</p>

  <p class="calibre1">　　@throw [NSException exceptionWithName:@“Singleton”</p>

  <p class="calibre1">　　reason:@“Use +[BNRImageStore sharedStore]”</p>

  <p class="calibre1">　　userInfo:nil];</p>

  <p class="calibre1">　　return nil;</p>

  <p class="calibre1">　　}</p>

  <p class="calibre1">　　// 私有初始化方法</p>

  <p class="calibre1">　　- （instancetype）initPrivate</p>

  <p class="calibre1">　　{</p>

  <p class="calibre1">　　self = [super init];</p>

  <p class="calibre1">　　if （self） {</p>

  <p class="calibre1">　　_dictionary = [[NSMutableDictionary alloc] init];</p>

  <p class="calibre1">　　}</p>

  <p class="calibre1">　　return self;</p>

  <p class="calibre1">　　}</p>

  <p class="calibre1">　　以上代码可以在单线程应用中正确创建单例，但是在多线程应用中，以上代码可能会创建多个BNRImageStore对象。同时，某个线程还可能会访问其他线程中没有正确初始化的BNRImageStore对象。</p>

  <p class="calibre1">　　为了确保在多线程应用中只创建一次对象，可以使用dispatch_once（）创建线程安全的单例（thread-safe singleton）。</p>

  <p class="calibre1">　　打开BNRImageStore.m，修改sharedStore方法，为BNRImageStore创建线程安全的单例：</p>

  <p class="calibre1">　　+ （instancetype）sharedStore</p>

  <p class="calibre1">　　{</p>

  <p class="calibre1">　　static BNRImageStore *sharedStore = nil;</p>

  <p class="calibre1">　　<del class="calibre11"><span class="calibre10">if （！sharedStore） {</span></del></p>

  <p class="calibre1">　　<del class="calibre11"><span class="calibre10">sharedStore = [[self alloc] initPrivate];</span></del></p>

  <p class="calibre1">　　<del class="calibre11"><span class="calibre10">}</span></del></p>

  <p class="calibre1"><span class="calibre10">　　static dispatch_once_t onceToken;</span><br class="calibre2"/></p>

  <p class="calibre1"><span class="calibre10">　　dispatch_once（&amp;onceToken, ^{</span><br class="calibre2"/></p>

  <p class="calibre1"><span class="calibre10">　　sharedStore = [[self alloc] initPrivate];</span><br class="calibre2"/></p>

  <p class="calibre1"><span class="calibre10">　　}）；</span><br class="calibre2"/></p>

  <p class="calibre1">　　return sharedStore;</p>

  <p class="calibre1">　　}</p>

  <p class="calibre1">　　构建并运行应用，虽然运行结果不会有任何变化，但是现在sharedStore可以在多核设备中正确返回唯一的BNRImageStore对象。</p>

  <p class="calibre1"><br class="calibre2"/></p>
<div class="calibre5">本书由「<a href="https://epubw.com" class="calibre6">ePUBw.COM</a>」整理，<a href="https://epubw.com" class="calibre6">ePUBw.COM</a> 提供最新最全的优质电子书下载！！！</div></body></html>
