<?xml version='1.0' encoding='utf-8'?>
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <title>未知</title>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <link href="../../stylesheet.css" rel="stylesheet" type="text/css"/>
<link href="../../page_styles.css" rel="stylesheet" type="text/css"/>
</head>
  <body class="calibre">
  <h2 class="calibre9">7.4 向屏幕中添加UILabel对象</h2>

  <p class="calibre1">　　为了增强HypnoNerd的催眠效果，本节将添加一些出现在屏幕随机位置的<span class="calibre10">UILabel</span>对象。</p>

  <p class="calibre1">　　在BNRHypnosisViewController.m中添加一个新方法，在屏幕随机位置绘制20个<span class="calibre10">UILabel</span>对象。同时，该方法有一个<span class="calibre10">NSString</span>类型的参数，表示<span class="calibre10">UILabel</span>对象显示的文字。</p>

  <p class="calibre1"><span class="calibre10">　　- (void)drawHypnoticMessage:(NSString *)message</span><br class="calibre2"/></p>

  <p class="calibre1"><span class="calibre10">　　{</span><br class="calibre2"/></p>

  <p class="calibre1"><span class="calibre10">　　for (int i = 0; i &lt; 20; i++) {</span><br class="calibre2"/></p>

  <p class="calibre1"><span class="calibre10">　　　　UILabel *messageLabel = [[UILabel alloc] init];</span><br class="calibre2"/></p>

  <p class="calibre1"><span class="calibre10">　　　　// 设置UILabel对象的文字和颜色</span><br class="calibre2"/></p>

  <p class="calibre1"><span class="calibre10">　　　　messageLabel.backgroundColor = [UIColor clearColor];</span><br class="calibre2"/></p>

  <p class="calibre1"><span class="calibre10">　　　　messageLabel.textColor = [UIColor whiteColor];</span><br class="calibre2"/></p>

  <p class="calibre1"><span class="calibre10">　　　　messageLabel.text = message;</span><br class="calibre2"/></p>

  <p class="calibre1"><span class="calibre10">　　　　// 根据需要显示的文字调整UILabel对象的大小</span><br class="calibre2"/></p>

  <p class="calibre1"><span class="calibre10">　　　　[messageLabel sizeToFit];</span><br class="calibre2"/></p>

  <p class="calibre1"><span class="calibre10">　　　　// 获取随机x坐标，</span><br class="calibre2"/></p>

  <p class="calibre1"><span class="calibre10">　　　　// 使UILabel对象的宽度不超出BNRHypnosisViewController的view宽度</span><br class="calibre2"/></p>

  <p class="calibre1"><span class="calibre10">　　　　int width = (int)(self.view.bounds.size.width –</span><br class="calibre2"/></p>

  <p class="calibre1"><span class="calibre10">　　　　　　messageLabel.bounds.size.width);</span><br class="calibre2"/></p>

  <p class="calibre1"><span class="calibre10">　　　　int x = arc4random() % width;</span><br class="calibre2"/></p>

  <p class="calibre1"><span class="calibre10">　　　　// 获取随机y坐标，</span><br class="calibre2"/></p>

  <p class="calibre1"><span class="calibre10">　　　　// 使UILabel对象的高度不超出BNRHypnosisViewController的view高度</span><br class="calibre2"/></p>

  <p class="calibre1"><span class="calibre10">　　　　int height = (int)(self.view.bounds.size.height –</span><br class="calibre2"/></p>

  <p class="calibre1"><span class="calibre10">　　　　　　messageLabel.bounds.size.height);</span><br class="calibre2"/></p>

  <p class="calibre1"><span class="calibre10">　　　　int y = arc4random() % height;</span><br class="calibre2"/></p>

  <p class="calibre1"><span class="calibre10">　　　　// 设UILabel对象的frame</span><br class="calibre2"/></p>

  <p class="calibre1"><span class="calibre10">　　　　CGRect frame = messageLabel.frame;</span><br class="calibre2"/></p>

  <p class="calibre1"><span class="calibre10">　　　　frame.origin = CGPointMake(x, y);</span><br class="calibre2"/></p>

  <p class="calibre1"><span class="calibre10">　　　　messageLabel.frame = frame;</span><br class="calibre2"/></p>

  <p class="calibre1"><span class="calibre10">　　　　// 将UILabel对象添加到BNRHypnosisViewController的view中</span><br class="calibre2"/></p>

  <p class="calibre1"><span class="calibre10">　　　　[self.view addSubview:messageLabel];</span><br class="calibre2"/></p>

  <p class="calibre1"><span class="calibre10">　　　　}</span><br class="calibre2"/></p>

  <p class="calibre1"><span class="calibre10">　　}</span><br class="calibre2"/></p>

  <p class="calibre1">　　接下来修改<span class="calibre10">textFieldShouldReturn:</span>，将<span class="calibre10">UITextField</span>对象的文本内容作为message参数。调用<span class="calibre10">drawHypnoticMessage:</span>；再清空文本内容并调用<span class="calibre10">resignFirstResponder</span>关闭键盘。</p>

  <p class="calibre1">　　- (BOOL)textFieldShouldReturn:(UITextField *)textField</p>

  <p class="calibre1">　　{</p>

  <p class="calibre1">　　<del class="calibre11"><span class="calibre10">NSLog(@"%@", textField.text);</span></del></p>

  <p class="calibre1"><span class="calibre10">　　[self drawHypnoticMessage:textField.text];</span><br class="calibre2"/></p>

  <p class="calibre1"><span class="calibre10">　　textField.text = @"";</span><br class="calibre2"/></p>

  <p class="calibre1"><span class="calibre10">　　[textField resignFirstResponder];</span><br class="calibre2"/></p>

  <p class="calibre1">　　return YES;</p>

  <p class="calibre1">　　}</p>

  <p class="calibre1">　　构建并运行应用，在<span class="calibre10">UITextField</span>对象中输入一些文字，然后点击Done，这时输入的文字会随机出现在屏幕中的各个位置。</p>

  <p class="calibre1"><br class="calibre2"/></p>
<div class="calibre5">本书由「<a href="https://epubw.com" class="calibre6">ePUBw.COM</a>」整理，<a href="https://epubw.com" class="calibre6">ePUBw.COM</a> 提供最新最全的优质电子书下载！！！</div></body></html>
