<?xml version='1.0' encoding='utf-8'?>
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <title>未知</title>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <link href="../../stylesheet.css" rel="stylesheet" type="text/css"/>
<link href="../../page_styles.css" rel="stylesheet" type="text/css"/>
</head>
  <body class="calibre">
  <h2 class="calibre9">11.4 NSDictionary</h2>

  <p class="calibre1">　　BNRImageStore的属性dictionary是一个指向NSMutableDictionary对象（字典对象）的指针。和数组对象类似，字典对象也是collection对象，也有不可修改的版本（NSDictionary）和可修改的版本（NSMutableDictionary）。数组对象与字典对象的差别是，数组对象包含一组有序的指向对象的指针，可以通过整数索引存取。例如，直接获取数组的第n个元素的代码如下：</p>

  <p class="calibre1">　　// 将某个对象插入数组顶部</p>

  <p class="calibre1">　　[someArray insertObject:someObject atIndex:0];</p>

  <p class="calibre1">　　// 获取刚才插入的对象</p>

  <p class="calibre1">　　someObject = [someArray objectAtIndex:0];</p>

  <p class="calibre1">　　字典对象中的指针不是有序排列的，需要通过键（key）来存取指针，不能使用索引。键其实也是对象，而且最常用的是NSString对象。</p>

  <p class="calibre1">　　// 将某个对象加入NSMutableDictioanry对象，对应的键是“MyKey”</p>

  <p class="calibre1">　　[someDictionary setObject:someObject forKey:@“MyKey”];</p>

  <p class="calibre1">　　// 取回刚才加入的对象</p>

  <p class="calibre1">　　someObject = [someDictionary objectForKey:@“MyKey”];</p>

  <p class="calibre1">　　字典对象是由键-值对（key-value pair）组成的。这里的键是某个不可修改的对象（通常是NSString对象），用来存取另一个与之对应的对象，也就是值。在其他语言中，这里的字典对象称为哈希图（hash map）或哈希表（hash table）。</p>

  <p class="calibre7"><img alt="tu11-10" src="../Images/image00524.jpeg" class="calibre8"/></p>

  <p class="calibre7">图11-10 NSDictionary对象图</p>

  <p class="calibre1">　　NSDictionary非常有用，其中最常见的用法是可变数据结构（flexible data structures）和查询表（lookup tables）。</p>

  <p class="calibre1">　　首先介绍可变数据结构。为了在代码中描述一个模型对象，常见的做法是创建一个NSObject的子类，然后添加模型对象的相关属性。例如，对于一个表示“人”的模型对象来说，可以创建一个名为Person的NSObject子类，然后添加姓名、年龄和其他需要的属性。类似地，NSDictionary也可以用来描述模型对象。还是以“人”为例，NSDictionary中可以针对姓名、年龄和其他需要的属性保存相应的键-值对。</p>

  <p class="calibre1">　　使用NSDictionary与NSObject子类Person的区别是，Person要求事先明确定义好“人”的各项属性，并且之后无法添加新的属性，也无法删除或修改现有属性。相反，如果使用NSDictionary，“人”的数据就只是一系列键-值对，操作起来非常简单，例如，为某个人添加“地址”时，只需要为@“address”键设置表示地址的字符串就可以了。</p>

  <p class="calibre1">　　当然，并不是所有的模型对象都可以通过NSDictionary来描述。大部分模型对象具有严格的定义和特定的数据处理方式，不适合采用简单的键-值对管理数据。相反，如果模型对象根据不同的配置选项具有不同的数据结构，就应该使用NSDictionary。例如UIImagePickerController的委托方法imagePickerController:didFinishPicking- MediaWithInfo:，其第二个参数就是一个通过NSDictionary描述的模型对象，根据UIImagePickerController的相关配置，该对象可能包含照片或视频（本章第11.12节会介绍如何使用UIImagePickerController录制视频），以及相关元数据信息。</p>

  <p class="calibre1">　　再介绍NSDictionary的另一个常见用法：查询表。读者在刚开始学习编程时，可能会写出类似如下代码：</p>

  <p class="calibre1">　　- （void）changeCharacterClass:（id）sender</p>

  <p class="calibre1">　　{</p>

  <p class="calibre1">　　NSString *enteredText = textField.text;</p>

  <p class="calibre1">　　CharacterClass *cc = nil;</p>

  <p class="calibre1">　　if （[enteredText isEqualToString:@“Warrior”]） {</p>

  <p class="calibre1">　　cc = knight;</p>

  <p class="calibre1">　　} else if （[enteredText isEqualToString:@“Mage”]） {</p>

  <p class="calibre1">　　cc = wizard;</p>

  <p class="calibre1">　　} else if （[enteredText isEqualToString:@“Thief”]） {</p>

  <p class="calibre1">　　cc = rogue;</p>

  <p class="calibre1">　　}</p>

  <p class="calibre1">　　character.characterClass = cc;</p>

  <p class="calibre1">　　}</p>

  <p class="calibre1">　　当读者需要编写包含大量if-else或switch语句的代码时，通常应该考虑替换为NSDictionary。NSDictionary可以事先在两组对象之间建立一对一的映射关系。例如，上述代码中的if-else语句可以替换为一个NSDictionary对象：</p>

  <p class="calibre1">　　NSMutableDictionary *lookup = [[NSMutableDictionary alloc] init];</p>

  <p class="calibre1">　　[lookup setObject:knight forKey:@“Warrior”];</p>

  <p class="calibre1">　　[lookup setObject:wizard forKey:@“Mage”];</p>

  <p class="calibre1">　　[lookup setObject:rogue forKey:@“Thief”];</p>

  <p class="calibre1">　　有了lookup查询表，changeCharacterClass:方法就可以简化为：</p>

  <p class="calibre1">　　- （void）changeCharacterClass:（id）sender</p>

  <p class="calibre1">　　{</p>

  <p class="calibre1">　　character.characterClass = [lookup objectForKey:textField.text];</p>

  <p class="calibre1">　　}</p>

  <p class="calibre1">　　使用NSDictionary查询表的另一个优点：不需要在方法中硬编码所有数据（角色类型）；相反，可以将数据保存在文件系统或远程服务器中，甚至可以由用户动态添加或修改。</p>

  <p class="calibre1">　　BNRImageStore将使用NSDictionary查询表存储照片。BNRImageStore会为每一张照片生成唯一的键，之后可以通过键查找对应的照片。</p>

  <p class="calibre1">　　使用字典对象时，键不能重复。在将某个键-值对加入字典对象时，如果字典对象已经保存了拥有相同的键的值，那么旧的值会被替换掉。如果要用一个键来保存多个对象，则可以先将这些对象存入数组对象，然后将这个数组对象作为值存入字典对象。</p>

  <p class="calibre1">　　与NSArray类似，NSDictionary提供了用于创建对象的简洁语法。请读者回忆NSArray的简洁语法并注意与NSDictionary的区别：NSArray是通过“@[]”创建的，NSDictionary则是通过“@{}”创建的。</p>

  <p class="calibre1">　　使用简洁语法创建NSDictionary对象时，每一个键值对之间需要使用逗号“，”隔开，而键与值之间则使用冒号“：”隔开，例如，</p>

  <p class="calibre1">　　NSDictionary *dictionary = @{@“key”: object, @“anotherKey”: anotherObject};</p>

  <p class="calibre1">　　另外，NSDictionary也可以使用NSArray中的下标语法，只需要将“[]”中的序号换成键，就可以读取该键所对应的值，例如，</p>

  <p class="calibre1">　　id object = dictionary[@“key”];</p>

  <p class="calibre1">　　// 与以下代码效果相同</p>

  <p class="calibre1">　　id object = [dictionary objectForKey:@“key”];</p>

  <p class="calibre1">　　而NSMutableDictionary还可以通过下标语法设置键所对应的值：</p>

  <p class="calibre1">　　dictionary[@“key”] = object;</p>

  <p class="calibre1">　　// 与以下代码效果相同</p>

  <p class="calibre1">　　[dictionary setObject:object forKey:@“key”];</p>

  <p class="calibre1">　　下面更新BNRImageStore，使用下标语法存取dictionary中的UIImage对象：</p>

  <p class="calibre1">　　- （void）setImage:（UIImage *）image forKey:（NSString *）key</p>

  <p class="calibre1">　　{</p>

  <p class="calibre1">　　<del class="calibre11"><span class="calibre10">[self.dictionary setObject:image forKey:key];</span></del></p>

  <p class="calibre1"><span class="calibre10">　　self.dictionary[key] = image;</span><br class="calibre2"/></p>

  <p class="calibre1">　　}</p>

  <p class="calibre1">　　- （UIImage *）imageForKey:（NSString *）key</p>

  <p class="calibre1">　　{</p>

  <p class="calibre1">　　<del class="calibre11"><span class="calibre10">return [self.dictionary objectForKey:key];</span></del></p>

  <p class="calibre1"><span class="calibre10">　　return self.dictionary[key];</span><br class="calibre2"/></p>

  <p class="calibre1">　　}</p>

  <p class="calibre1">　　字典对象的内存管理和数组对象类似。当字典对象加入某个对象后，会成为该对象的拥有方。当字典对象移除某个对象后，会放弃该对象的拥有权。</p>

  <p class="calibre1"><br class="calibre2"/></p>
<div class="calibre5">本书由「<a href="https://epubw.com" class="calibre6">ePUBw.COM</a>」整理，<a href="https://epubw.com" class="calibre6">ePUBw.COM</a> 提供最新最全的优质电子书下载！！！</div></body></html>
